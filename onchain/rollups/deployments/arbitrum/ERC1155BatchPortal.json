{
  "address": "0xedB53860A6B52bbb7561Ad596416ee9965B055Aa",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IInputBox",
          "name": "_inputBox",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC1155",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_dapp",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_tokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_values",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "_baseLayerData",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_execLayerData",
          "type": "bytes"
        }
      ],
      "name": "depositBatchERC1155Token",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getInputBox",
      "outputs": [
        {
          "internalType": "contract IInputBox",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xd20a36dab70ce74abe4daa810c7991d7b773332acc58d1aed3a05ac52e706c71",
  "receipt": {
    "to": "0x914d7Fec6aaC8cd542e72Bca78B30650d45643d7",
    "from": "0x0e28A8f88C6266dF0FE274c15c1d4b27f8B373C0",
    "contractAddress": null,
    "transactionIndex": 16,
    "gasUsed": "3597120",
    "logsBloom": "0x
    "blockHash": "0x0c13d34e61f7ad63d374d2f467ac6e9a47705c580edc02aab1f1927fcb1b8776",
    "transactionHash": "0xd20a36dab70ce74abe4daa810c7991d7b773332acc58d1aed3a05ac52e706c71",
    "logs": [],
    "blockNumber": 115470671,
    "cumulativeGasUsed": "18668054",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x59b22D57D4f067708AB0c00552767405926dc768"
  ],
  "numDeployments": 1,
  "solcInputHash": "d2696284402b6703b2d41170c93ef3b7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IInputBox\",\"name\":\"_inputBox\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"contract IERC1155\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dapp\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"_baseLayerData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_execLayerData\",\"type\":\"bytes\"}],\"name\":\"depositBatchERC1155Token\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInputBox\",\"outputs\":[{\"internalType\":\"contract IInputBox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_inputBox\":\"The input box used by the portal\"}},\"depositBatchERC1155Token(address,address,uint256[],uint256[],bytes,bytes)\":{\"details\":\"Please make sure `_tokenIds` and `_values` have the same length.\",\"params\":{\"_baseLayerData\":\"Additional data to be interpreted by the base layer\",\"_dapp\":\"The address of the DApp\",\"_execLayerData\":\"Additional data to be interpreted by the execution layer\",\"_token\":\"The ERC-1155 token contract\",\"_tokenIds\":\"The identifiers of the tokens being transferred\",\"_values\":\"Transfer amounts per token type\"}},\"getInputBox()\":{\"returns\":{\"_0\":\"The input box\"}}},\"title\":\"ERC-1155 Batch Transfer Portal\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Constructs the portal.\"},\"depositBatchERC1155Token(address,address,uint256[],uint256[],bytes,bytes)\":{\"notice\":\"Transfer a batch of ERC-1155 tokens to a DApp and add an input to the DApp's input box to signal such operation. The caller must enable approval for the portal to manage all of their tokens beforehand, by calling the `setApprovalForAll` function in the token contract.\"},\"getInputBox()\":{\"notice\":\"Get the input box used by this input relay.\"}},\"notice\":\"This contract allows anyone to perform batch transfers of ERC-1155 tokens to a DApp while informing the off-chain machine.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/portals/ERC1155BatchPortal.sol\":\"ERC1155BatchPortal\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xcab667ddad478ff0d39c2053ca77fac778af8483c18ab07d810277b4216fd582\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/common/InputEncoding.sol\":{\"content\":\"// (c) Cartesi and individual authors (see AUTHORS)\\n// SPDX-License-Identifier: Apache-2.0 (see LICENSE)\\n\\npragma solidity ^0.8.8;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport {IERC1155} from \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\n\\n/// @title Input Encoding Library\\n\\n/// @notice Defines the encoding of inputs added by core trustless and\\n/// permissionless contracts, such as portals and relays.\\nlibrary InputEncoding {\\n    /// @notice Encode an Ether deposit.\\n    /// @param sender The Ether sender\\n    /// @param value The amount of Ether being sent in Wei\\n    /// @param execLayerData Additional data to be interpreted by the execution layer\\n    /// @return The encoded input\\n    function encodeEtherDeposit(\\n        address sender,\\n        uint256 value,\\n        bytes calldata execLayerData\\n    ) internal pure returns (bytes memory) {\\n        return\\n            abi.encodePacked(\\n                sender, //              20B\\n                value, //               32B\\n                execLayerData //        arbitrary size\\n            );\\n    }\\n\\n    /// @notice Encode an ERC-20 token deposit.\\n    /// @param ret The return value of `transferFrom`\\n    /// @param token The token contract\\n    /// @param sender The token sender\\n    /// @param amount The amount of tokens being sent\\n    /// @param execLayerData Additional data to be interpreted by the execution layer\\n    /// @return The encoded input\\n    function encodeERC20Deposit(\\n        bool ret,\\n        IERC20 token,\\n        address sender,\\n        uint256 amount,\\n        bytes calldata execLayerData\\n    ) internal pure returns (bytes memory) {\\n        return\\n            abi.encodePacked(\\n                ret, //                 1B\\n                token, //               20B\\n                sender, //              20B\\n                amount, //              32B\\n                execLayerData //        arbitrary size\\n            );\\n    }\\n\\n    /// @notice Encode an ERC-721 token deposit.\\n    /// @param token The token contract\\n    /// @param sender The token sender\\n    /// @param tokenId The token identifier\\n    /// @param baseLayerData Additional data to be interpreted by the base layer\\n    /// @param execLayerData Additional data to be interpreted by the execution layer\\n    /// @return The encoded input\\n    /// @dev `baseLayerData` should be forwarded to `token`.\\n    function encodeERC721Deposit(\\n        IERC721 token,\\n        address sender,\\n        uint256 tokenId,\\n        bytes calldata baseLayerData,\\n        bytes calldata execLayerData\\n    ) internal pure returns (bytes memory) {\\n        bytes memory data = abi.encode(baseLayerData, execLayerData);\\n        return\\n            abi.encodePacked(\\n                token, //               20B\\n                sender, //              20B\\n                tokenId, //             32B\\n                data //                 arbitrary size\\n            );\\n    }\\n\\n    /// @notice Encode an ERC-1155 single token deposit.\\n    /// @param token The ERC-1155 token contract\\n    /// @param sender The token sender\\n    /// @param tokenId The identifier of the token being transferred\\n    /// @param value Transfer amount\\n    /// @param baseLayerData Additional data to be interpreted by the base layer\\n    /// @param execLayerData Additional data to be interpreted by the execution layer\\n    /// @return The encoded input\\n    /// @dev `baseLayerData` should be forwarded to `token`.\\n    function encodeSingleERC1155Deposit(\\n        IERC1155 token,\\n        address sender,\\n        uint256 tokenId,\\n        uint256 value,\\n        bytes calldata baseLayerData,\\n        bytes calldata execLayerData\\n    ) internal pure returns (bytes memory) {\\n        bytes memory data = abi.encode(baseLayerData, execLayerData);\\n        return\\n            abi.encodePacked(\\n                token, //               20B\\n                sender, //              20B\\n                tokenId, //             32B\\n                value, //               32B\\n                data //                 arbitrary size\\n            );\\n    }\\n\\n    /// @notice Encode an ERC-1155 batch token deposit.\\n    /// @param token The ERC-1155 token contract\\n    /// @param sender The token sender\\n    /// @param tokenIds The identifiers of the tokens being transferred\\n    /// @param values Transfer amounts per token type\\n    /// @param baseLayerData Additional data to be interpreted by the base layer\\n    /// @param execLayerData Additional data to be interpreted by the execution layer\\n    /// @return The encoded input\\n    /// @dev `baseLayerData` should be forwarded to `token`.\\n    function encodeBatchERC1155Deposit(\\n        IERC1155 token,\\n        address sender,\\n        uint256[] calldata tokenIds,\\n        uint256[] calldata values,\\n        bytes calldata baseLayerData,\\n        bytes calldata execLayerData\\n    ) internal pure returns (bytes memory) {\\n        bytes memory data = abi.encode(\\n            tokenIds,\\n            values,\\n            baseLayerData,\\n            execLayerData\\n        );\\n        return\\n            abi.encodePacked(\\n                token, //                   20B\\n                sender, //                  20B\\n                data //                     arbitrary size\\n            );\\n    }\\n\\n    /// @notice Encode a DApp address relay.\\n    /// @param dapp The DApp address\\n    /// @return The encoded input\\n    function encodeDAppAddressRelay(\\n        address dapp\\n    ) internal pure returns (bytes memory) {\\n        return\\n            abi.encodePacked(\\n                dapp //                     20B\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x5dce266a7b70ba86adf6a728c7667255d3e2b20f1789a951150a1d05439b7019\",\"license\":\"Apache-2.0 (see LICENSE)\"},\"contracts/inputs/IInputBox.sol\":{\"content\":\"// (c) Cartesi and individual authors (see AUTHORS)\\n// SPDX-License-Identifier: Apache-2.0 (see LICENSE)\\n\\npragma solidity ^0.8.8;\\n\\n/// @title Input Box interface\\ninterface IInputBox {\\n    /// @notice Emitted when an input is added to a DApp's input box.\\n    /// @param dapp The address of the DApp\\n    /// @param inputIndex The index of the input in the input box\\n    /// @param sender The address that sent the input\\n    /// @param input The contents of the input\\n    /// @dev MUST be triggered on a successful call to `addInput`.\\n    event InputAdded(\\n        address indexed dapp,\\n        uint256 indexed inputIndex,\\n        address sender,\\n        bytes input\\n    );\\n\\n    /// @notice Add an input to a DApp's input box.\\n    /// @param _dapp The address of the DApp\\n    /// @param _input The contents of the input\\n    /// @return The hash of the input plus some extra metadata\\n    /// @dev MUST fire an `InputAdded` event accordingly.\\n    ///      Input larger than machine limit will raise `InputSizeExceedsLimit` error.\\n    function addInput(\\n        address _dapp,\\n        bytes calldata _input\\n    ) external returns (bytes32);\\n\\n    /// @notice Get the number of inputs in a DApp's input box.\\n    /// @param _dapp The address of the DApp\\n    /// @return Number of inputs in the DApp's input box\\n    function getNumberOfInputs(address _dapp) external view returns (uint256);\\n\\n    /// @notice Get the hash of an input in a DApp's input box.\\n    /// @param _dapp The address of the DApp\\n    /// @param _index The index of the input in the DApp's input box\\n    /// @return The hash of the input at the provided index in the DApp's input box\\n    /// @dev `_index` MUST be in the interval `[0,n)` where `n` is the number of\\n    ///      inputs in the DApp's input box. See the `getNumberOfInputs` function.\\n    function getInputHash(\\n        address _dapp,\\n        uint256 _index\\n    ) external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x95e007391405e86eeb980be9a99e5cf15b34bb5b819292d206ef8a58f9c46c25\",\"license\":\"Apache-2.0 (see LICENSE)\"},\"contracts/inputs/IInputRelay.sol\":{\"content\":\"// (c) Cartesi and individual authors (see AUTHORS)\\n// SPDX-License-Identifier: Apache-2.0 (see LICENSE)\\n\\npragma solidity ^0.8.8;\\n\\nimport {IInputBox} from \\\"./IInputBox.sol\\\";\\n\\n/// @title Input Relay interface\\ninterface IInputRelay {\\n    // Permissionless functions\\n\\n    /// @notice Get the input box used by this input relay.\\n    /// @return The input box\\n    function getInputBox() external view returns (IInputBox);\\n}\\n\",\"keccak256\":\"0x8c9316c43cc2c7754fbd5abccfcdbc5ed09a2f1228d993240eac6c41ea531521\",\"license\":\"Apache-2.0 (see LICENSE)\"},\"contracts/inputs/InputRelay.sol\":{\"content\":\"// (c) Cartesi and individual authors (see AUTHORS)\\n// SPDX-License-Identifier: Apache-2.0 (see LICENSE)\\n\\npragma solidity ^0.8.8;\\n\\nimport {IInputRelay} from \\\"./IInputRelay.sol\\\";\\nimport {IInputBox} from \\\"./IInputBox.sol\\\";\\n\\n/// @title Input Relay\\n/// @notice This contract serves as a base for all the other input relays.\\ncontract InputRelay is IInputRelay {\\n    /// @notice The input box used by the input relay.\\n    IInputBox internal immutable inputBox;\\n\\n    /// @notice Constructs the input relay.\\n    /// @param _inputBox The input box used by the input relay\\n    constructor(IInputBox _inputBox) {\\n        inputBox = _inputBox;\\n    }\\n\\n    function getInputBox() external view override returns (IInputBox) {\\n        return inputBox;\\n    }\\n}\\n\",\"keccak256\":\"0xbb489f157a0bd7a9da29b0bf3c47c4b4051d90ccd252abc3f81c8e897329e590\",\"license\":\"Apache-2.0 (see LICENSE)\"},\"contracts/portals/ERC1155BatchPortal.sol\":{\"content\":\"// (c) Cartesi and individual authors (see AUTHORS)\\n// SPDX-License-Identifier: Apache-2.0 (see LICENSE)\\n\\npragma solidity ^0.8.8;\\n\\nimport {IERC1155} from \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\n\\nimport {IERC1155BatchPortal} from \\\"./IERC1155BatchPortal.sol\\\";\\nimport {InputRelay} from \\\"../inputs/InputRelay.sol\\\";\\nimport {IInputBox} from \\\"../inputs/IInputBox.sol\\\";\\nimport {InputEncoding} from \\\"../common/InputEncoding.sol\\\";\\n\\n/// @title ERC-1155 Batch Transfer Portal\\n///\\n/// @notice This contract allows anyone to perform batch transfers of\\n/// ERC-1155 tokens to a DApp while informing the off-chain machine.\\ncontract ERC1155BatchPortal is InputRelay, IERC1155BatchPortal {\\n    /// @notice Constructs the portal.\\n    /// @param _inputBox The input box used by the portal\\n    constructor(IInputBox _inputBox) InputRelay(_inputBox) {}\\n\\n    function depositBatchERC1155Token(\\n        IERC1155 _token,\\n        address _dapp,\\n        uint256[] calldata _tokenIds,\\n        uint256[] calldata _values,\\n        bytes calldata _baseLayerData,\\n        bytes calldata _execLayerData\\n    ) external override {\\n        _token.safeBatchTransferFrom(\\n            msg.sender,\\n            _dapp,\\n            _tokenIds,\\n            _values,\\n            _baseLayerData\\n        );\\n\\n        bytes memory input = InputEncoding.encodeBatchERC1155Deposit(\\n            _token,\\n            msg.sender,\\n            _tokenIds,\\n            _values,\\n            _baseLayerData,\\n            _execLayerData\\n        );\\n\\n        inputBox.addInput(_dapp, input);\\n    }\\n}\\n\",\"keccak256\":\"0x8aab3384ab673cf9dd34da33b2a1c9efbbfb4960acaee44c7d50c63344237d86\",\"license\":\"Apache-2.0 (see LICENSE)\"},\"contracts/portals/IERC1155BatchPortal.sol\":{\"content\":\"// (c) Cartesi and individual authors (see AUTHORS)\\n// SPDX-License-Identifier: Apache-2.0 (see LICENSE)\\n\\npragma solidity ^0.8.8;\\n\\nimport {IInputRelay} from \\\"../inputs/IInputRelay.sol\\\";\\nimport {IERC1155} from \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\n\\n/// @title ERC-1155 Batch Transfer Portal interface\\ninterface IERC1155BatchPortal is IInputRelay {\\n    // Permissionless functions\\n\\n    /// @notice Transfer a batch of ERC-1155 tokens to a DApp and add an input to\\n    /// the DApp's input box to signal such operation.\\n    ///\\n    /// The caller must enable approval for the portal to manage all of their tokens\\n    /// beforehand, by calling the `setApprovalForAll` function in the token contract.\\n    ///\\n    /// @param _token The ERC-1155 token contract\\n    /// @param _dapp The address of the DApp\\n    /// @param _tokenIds The identifiers of the tokens being transferred\\n    /// @param _values Transfer amounts per token type\\n    /// @param _baseLayerData Additional data to be interpreted by the base layer\\n    /// @param _execLayerData Additional data to be interpreted by the execution layer\\n    ///\\n    /// @dev Please make sure `_tokenIds` and `_values` have the same length.\\n    function depositBatchERC1155Token(\\n        IERC1155 _token,\\n        address _dapp,\\n        uint256[] calldata _tokenIds,\\n        uint256[] calldata _values,\\n        bytes calldata _baseLayerData,\\n        bytes calldata _execLayerData\\n    ) external;\\n}\\n\",\"keccak256\":\"0xfd76007f27ca0b4886d477eabdbda517e6a4a139c2b044cd8b59debf4894016d\",\"license\":\"Apache-2.0 (see LICENSE)\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b5060405161064538038061064583398101604081905261002f91610040565b6001600160a01b0316608052610070565b60006020828403121561005257600080fd5b81516001600160a01b038116811461006957600080fd5b9392505050565b6080516105b461009160003960008181603c015261012601526105b46000f3fe608060405234801561001057600080fd5b50600436106100355760003560e01c8062aace9a1461003a57806324d15c6714610077575b600080fd5b7f00000000000000000000000000000000000000000000000000000000000000006040516001600160a01b03909116815260200160405180910390f35b61008a6100853660046102c1565b61008c565b005b604051631759616b60e11b81526001600160a01b038b1690632eb2c2d6906100c69033908d908d908d908d908d908d908d90600401610404565b600060405180830381600087803b1580156100e057600080fd5b505af11580156100f4573d6000803e3d6000fd5b50505050600061010c8b338b8b8b8b8b8b8b8b6101ae565b604051631789cd6360e01b81529091506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690631789cd639061015d908d90859060040161048c565b6020604051808303816000875af115801561017c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101a091906104ce565b505050505050505050505050565b6060600089898989898989896040516020016101d19897969594939291906104e7565b60405160208183030381529060405290508b8b826040516020016101f793929190610538565b6040516020818303038152906040529150509a9950505050505050505050565b80356001600160a01b038116811461022e57600080fd5b919050565b60008083601f84011261024557600080fd5b50813567ffffffffffffffff81111561025d57600080fd5b6020830191508360208260051b850101111561027857600080fd5b9250929050565b60008083601f84011261029157600080fd5b50813567ffffffffffffffff8111156102a957600080fd5b60208301915083602082850101111561027857600080fd5b60008060008060008060008060008060c08b8d0312156102e057600080fd5b6102e98b610217565b99506102f760208c01610217565b985060408b013567ffffffffffffffff8082111561031457600080fd5b6103208e838f01610233565b909a50985060608d013591508082111561033957600080fd5b6103458e838f01610233565b909850965060808d013591508082111561035e57600080fd5b61036a8e838f0161027f565b909650945060a08d013591508082111561038357600080fd5b506103908d828e0161027f565b915080935050809150509295989b9194979a5092959850565b81835260006001600160fb1b038311156103c257600080fd5b8260051b80836020870137939093016020019392505050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6001600160a01b0389811682528816602082015260a060408201819052600090610431908301888a6103a9565b82810360608401526104448187896103a9565b905082810360808401526104598185876103db565b9b9a5050505050505050505050565b60005b8381101561048357818101518382015260200161046b565b50506000910152565b60018060a01b038316815260406020820152600082518060408401526104b9816060850160208701610468565b601f01601f1916919091016060019392505050565b6000602082840312156104e057600080fd5b5051919050565b6080815260006104fb608083018a8c6103a9565b828103602084015261050e81898b6103a9565b905082810360408401526105238187896103db565b905082810360608401526104598185876103db565b60006bffffffffffffffffffffffff19808660601b168352808560601b16601484015250825161056f816028850160208701610468565b9190910160280194935050505056fea2646970667358221220b1261ceaf7c0f69c5d0d611864ae36802a7987738f02b3c9f93c1843357f32eb64736f6c63430008130033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100355760003560e01c8062aace9a1461003a57806324d15c6714610077575b600080fd5b7f00000000000000000000000000000000000000000000000000000000000000006040516001600160a01b03909116815260200160405180910390f35b61008a6100853660046102c1565b61008c565b005b604051631759616b60e11b81526001600160a01b038b1690632eb2c2d6906100c69033908d908d908d908d908d908d908d90600401610404565b600060405180830381600087803b1580156100e057600080fd5b505af11580156100f4573d6000803e3d6000fd5b50505050600061010c8b338b8b8b8b8b8b8b8b6101ae565b604051631789cd6360e01b81529091506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690631789cd639061015d908d90859060040161048c565b6020604051808303816000875af115801561017c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101a091906104ce565b505050505050505050505050565b6060600089898989898989896040516020016101d19897969594939291906104e7565b60405160208183030381529060405290508b8b826040516020016101f793929190610538565b6040516020818303038152906040529150509a9950505050505050505050565b80356001600160a01b038116811461022e57600080fd5b919050565b60008083601f84011261024557600080fd5b50813567ffffffffffffffff81111561025d57600080fd5b6020830191508360208260051b850101111561027857600080fd5b9250929050565b60008083601f84011261029157600080fd5b50813567ffffffffffffffff8111156102a957600080fd5b60208301915083602082850101111561027857600080fd5b60008060008060008060008060008060c08b8d0312156102e057600080fd5b6102e98b610217565b99506102f760208c01610217565b985060408b013567ffffffffffffffff8082111561031457600080fd5b6103208e838f01610233565b909a50985060608d013591508082111561033957600080fd5b6103458e838f01610233565b909850965060808d013591508082111561035e57600080fd5b61036a8e838f0161027f565b909650945060a08d013591508082111561038357600080fd5b506103908d828e0161027f565b915080935050809150509295989b9194979a5092959850565b81835260006001600160fb1b038311156103c257600080fd5b8260051b80836020870137939093016020019392505050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6001600160a01b0389811682528816602082015260a060408201819052600090610431908301888a6103a9565b82810360608401526104448187896103a9565b905082810360808401526104598185876103db565b9b9a5050505050505050505050565b60005b8381101561048357818101518382015260200161046b565b50506000910152565b60018060a01b038316815260406020820152600082518060408401526104b9816060850160208701610468565b601f01601f1916919091016060019392505050565b6000602082840312156104e057600080fd5b5051919050565b6080815260006104fb608083018a8c6103a9565b828103602084015261050e81898b6103a9565b905082810360408401526105238187896103db565b905082810360608401526104598185876103db565b60006bffffffffffffffffffffffff19808660601b168352808560601b16601484015250825161056f816028850160208701610468565b9190910160280194935050505056fea2646970667358221220b1261ceaf7c0f69c5d0d611864ae36802a7987738f02b3c9f93c1843357f32eb64736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "_inputBox": "The input box used by the portal"
        }
      },
      "depositBatchERC1155Token(address,address,uint256[],uint256[],bytes,bytes)": {
        "details": "Please make sure `_tokenIds` and `_values` have the same length.",
        "params": {
          "_baseLayerData": "Additional data to be interpreted by the base layer",
          "_dapp": "The address of the DApp",
          "_execLayerData": "Additional data to be interpreted by the execution layer",
          "_token": "The ERC-1155 token contract",
          "_tokenIds": "The identifiers of the tokens being transferred",
          "_values": "Transfer amounts per token type"
        }
      },
      "getInputBox()": {
        "returns": {
          "_0": "The input box"
        }
      }
    },
    "title": "ERC-1155 Batch Transfer Portal",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "Constructs the portal."
      },
      "depositBatchERC1155Token(address,address,uint256[],uint256[],bytes,bytes)": {
        "notice": "Transfer a batch of ERC-1155 tokens to a DApp and add an input to the DApp's input box to signal such operation. The caller must enable approval for the portal to manage all of their tokens beforehand, by calling the `setApprovalForAll` function in the token contract."
      },
      "getInputBox()": {
        "notice": "Get the input box used by this input relay."
      }
    },
    "notice": "This contract allows anyone to perform batch transfers of ERC-1155 tokens to a DApp while informing the off-chain machine.",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}