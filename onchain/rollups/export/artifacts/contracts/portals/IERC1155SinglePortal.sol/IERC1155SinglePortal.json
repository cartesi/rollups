{
<<<<<<< HEAD
  "contractName": "IERC1155SinglePortal",
  "sourceName": "contracts/portals/IERC1155SinglePortal.sol",
=======
<<<<<<<< HEAD:onchain/rollups/export/artifacts/contracts/portals/IERC1155BatchPortal.sol/IERC1155BatchPortal.json
  "contractName": "IERC1155BatchPortal",
  "sourceName": "contracts/portals/IERC1155BatchPortal.sol",
========
  "contractName": "IERC1155SinglePortal",
  "sourceName": "contracts/portals/IERC1155SinglePortal.sol",
>>>>>>>> 31ce7a7f (fix(onchain): Added custom errors for contracts):onchain/rollups/export/artifacts/contracts/portals/IERC1155SinglePortal.sol/IERC1155SinglePortal.json
>>>>>>> 31ce7a7f (fix(onchain): Added custom errors for contracts)
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IERC1155",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_dapp",
          "type": "address"
        },
        {
<<<<<<< HEAD
=======
<<<<<<<< HEAD:onchain/rollups/export/artifacts/contracts/portals/IERC1155BatchPortal.sol/IERC1155BatchPortal.json
          "internalType": "uint256[]",
          "name": "_tokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_values",
          "type": "uint256[]"
========
>>>>>>> 31ce7a7f (fix(onchain): Added custom errors for contracts)
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
<<<<<<< HEAD
=======
>>>>>>>> 31ce7a7f (fix(onchain): Added custom errors for contracts):onchain/rollups/export/artifacts/contracts/portals/IERC1155SinglePortal.sol/IERC1155SinglePortal.json
>>>>>>> 31ce7a7f (fix(onchain): Added custom errors for contracts)
        },
        {
          "internalType": "bytes",
          "name": "_baseLayerData",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_execLayerData",
          "type": "bytes"
        }
      ],
<<<<<<< HEAD
      "name": "depositSingleERC1155Token",
=======
<<<<<<<< HEAD:onchain/rollups/export/artifacts/contracts/portals/IERC1155BatchPortal.sol/IERC1155BatchPortal.json
      "name": "depositBatchERC1155Token",
========
      "name": "depositSingleERC1155Token",
>>>>>>>> 31ce7a7f (fix(onchain): Added custom errors for contracts):onchain/rollups/export/artifacts/contracts/portals/IERC1155SinglePortal.sol/IERC1155SinglePortal.json
>>>>>>> 31ce7a7f (fix(onchain): Added custom errors for contracts)
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getInputBox",
      "outputs": [
        {
          "internalType": "contract IInputBox",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "bytecode": "0x",
  "deployedBytecode": "0x",
  "linkReferences": {},
  "deployedLinkReferences": {},
  "devdoc": {
    "kind": "dev",
    "methods": {
<<<<<<< HEAD
      "depositSingleERC1155Token(address,address,uint256,uint256,bytes,bytes)": {
=======
<<<<<<<< HEAD:onchain/rollups/export/artifacts/contracts/portals/IERC1155BatchPortal.sol/IERC1155BatchPortal.json
      "depositBatchERC1155Token(address,address,uint256[],uint256[],bytes,bytes)": {
        "details": "Please make sure `_tokenIds` and `_values` have the same length.",
========
      "depositSingleERC1155Token(address,address,uint256,uint256,bytes,bytes)": {
        "details": "The caller must allow the portal to withdraw the token      from their account beforehand.",
>>>>>>>> 31ce7a7f (fix(onchain): Added custom errors for contracts):onchain/rollups/export/artifacts/contracts/portals/IERC1155SinglePortal.sol/IERC1155SinglePortal.json
>>>>>>> 31ce7a7f (fix(onchain): Added custom errors for contracts)
        "params": {
          "_baseLayerData": "Additional data to be interpreted by the base layer",
          "_dapp": "The address of the DApp",
          "_execLayerData": "Additional data to be interpreted by the execution layer",
          "_token": "The ERC-1155 token contract",
<<<<<<< HEAD
          "_tokenId": "The identifier of the token being transferred",
          "_value": "Transfer amount"
=======
<<<<<<<< HEAD:onchain/rollups/export/artifacts/contracts/portals/IERC1155BatchPortal.sol/IERC1155BatchPortal.json
          "_tokenIds": "The identifiers of the tokens being transferred",
          "_values": "Transfer amounts per token type"
========
          "_tokenId": "The identifier of the token being transferred",
          "_value": "Transfer amount"
>>>>>>>> 31ce7a7f (fix(onchain): Added custom errors for contracts):onchain/rollups/export/artifacts/contracts/portals/IERC1155SinglePortal.sol/IERC1155SinglePortal.json
>>>>>>> 31ce7a7f (fix(onchain): Added custom errors for contracts)
        }
      },
      "getInputBox()": {
        "returns": {
          "_0": "The input box"
        }
      }
    },
<<<<<<< HEAD
    "title": "ERC-1155 Single Transfer Portal interface",
=======
    "title": "ERC-1155 Batch Transfer Portal interface",
>>>>>>> 31ce7a7f (fix(onchain): Added custom errors for contracts)
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
<<<<<<< HEAD
      "depositSingleERC1155Token(address,address,uint256,uint256,bytes,bytes)": {
        "notice": "Transfer an ERC-1155 token to a DApp and add an input to the DApp's input box to signal such operation. The caller must enable approval for the portal to manage all of their tokens beforehand, by calling the `setApprovalForAll` function in the token contract."
=======
<<<<<<<< HEAD:onchain/rollups/export/artifacts/contracts/portals/IERC1155BatchPortal.sol/IERC1155BatchPortal.json
      "depositBatchERC1155Token(address,address,uint256[],uint256[],bytes,bytes)": {
        "notice": "Transfer a batch of ERC-1155 tokens to a DApp and add an input to the DApp's input box to signal such operation. The caller must enable approval for the portal to manage all of their tokens beforehand, by calling the `setApprovalForAll` function in the token contract."
========
      "depositSingleERC1155Token(address,address,uint256,uint256,bytes,bytes)": {
        "notice": "Transfer an ERC-1155 token to a DApp and add an input to         the DApp's input box to signal such operation."
>>>>>>>> 31ce7a7f (fix(onchain): Added custom errors for contracts):onchain/rollups/export/artifacts/contracts/portals/IERC1155SinglePortal.sol/IERC1155SinglePortal.json
>>>>>>> 31ce7a7f (fix(onchain): Added custom errors for contracts)
      },
      "getInputBox()": {
        "notice": "Get the input box used by this portal."
      }
    },
    "version": 1
  },
  "evm": {
    "gasEstimates": null,
    "methodIdentifiers": {
<<<<<<< HEAD
      "depositSingleERC1155Token(address,address,uint256,uint256,bytes,bytes)": "dec07dca",
=======
<<<<<<<< HEAD:onchain/rollups/export/artifacts/contracts/portals/IERC1155BatchPortal.sol/IERC1155BatchPortal.json
      "depositBatchERC1155Token(address,address,uint256[],uint256[],bytes,bytes)": "24d15c67",
========
      "depositSingleERC1155Token(address,address,uint256,uint256,bytes,bytes)": "dec07dca",
>>>>>>>> 31ce7a7f (fix(onchain): Added custom errors for contracts):onchain/rollups/export/artifacts/contracts/portals/IERC1155SinglePortal.sol/IERC1155SinglePortal.json
>>>>>>> 31ce7a7f (fix(onchain): Added custom errors for contracts)
      "getInputBox()": "00aace9a"
    }
  }
}